use lazy_static::lazy_static;
use tracing::error;

pub(crate) struct Runtime<'a>(pub(crate) &'a mut crate::policy_evaluator::BurregoEvaluator);

use crate::policy_evaluator::{PolicySettings, ValidateRequest};
use crate::validation_response::ValidationResponse;
use burrego::opa::host_callbacks::HostCallbacks;

use kubewarden_policy_sdk::settings::SettingsValidationResponse;

lazy_static! {
    pub static ref DEFAULT_HOST_CALLBACKS: HostCallbacks = HostCallbacks {
        opa_abort: Box::new(BurregoHostCallbacks::opa_abort),
        opa_println: Box::new(BurregoHostCallbacks::opa_println),
    };
}

struct BurregoHostCallbacks;

impl BurregoHostCallbacks {
    #[tracing::instrument(level = "error")]
    fn opa_abort(msg: String) {}

    #[tracing::instrument(level = "info")]
    fn opa_println(msg: String) {}
}

impl<'a> Runtime<'a> {
    pub fn validate(
        &mut self,
        _settings: &PolicySettings,
        request: &ValidateRequest,
    ) -> ValidationResponse {
        let uid = request.uid();

        let burrego_evaluation =
            self.0
                .evaluator
                .evaluate(self.0.entrypoint_id, &self.0.input, &self.0.data);

        match burrego_evaluation {
            Ok(evaluation_result) => {
                // According to the OPA WASM
                // documentation/specification, the result of
                // the evaluation will contain an object of
                // the form:
                //
                // ```
                // [
                //   {
                //     "result": "<the AdmissionReview object -- generated by the policy>"
                //   }
                // ]
                // ```
                //
                // Reference: https://www.openpolicyagent.org/docs/v0.31.0/wasm/#compiling-policies
                let evaluation_result = evaluation_result
                    .get(0)
                    .and_then(|r| r.get("result"))
                    .and_then(|r| r.get("response"));

                match evaluation_result {
                    Some(evaluation_result) => {
                        match serde_json::from_value(evaluation_result.clone()) {
                            Ok(evaluation_result) => ValidationResponse {
                                uid: uid.to_string(),
                                ..evaluation_result
                            },
                            Err(err) => ValidationResponse::reject_internal_server_error(
                                uid.to_string(),
                                err.to_string(),
                            ),
                        }
                    }
                    None => ValidationResponse::reject_internal_server_error(
                        uid.to_string(),
                        "cannot interpret OPA policy result".to_string(),
                    ),
                }
            }
            Err(err) => {
                error!(
                    error = err.to_string().as_str(),
                    "error evaluating policy with burrego"
                );
                ValidationResponse::reject_internal_server_error(uid.to_string(), err.to_string())
            }
        }
    }

    pub fn validate_settings(&mut self, _settings: String) -> SettingsValidationResponse {
        // The burrego backend is mainly for compatibility with
        // existing OPA policies. Those policies don't have a generic
        // way of validating settings. Return true
        SettingsValidationResponse {
            valid: true,
            message: None,
        }
    }
}
