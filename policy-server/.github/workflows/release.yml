name: policy-server release
on:
  push:
    tags:
    - 'v*'

# Declare default permissions as read only.
permissions: read-all

jobs:
  ci:
    uses: ./.github/workflows/ci.yml
    permissions: read-all

  container-build:
    uses: ./.github/workflows/container-build.yml
    permissions:
      id-token: write
      packages: write
  release:
    permissions:
      id-token: write
      contents: write
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - ci
      - container-build
    steps:
      - name: Install Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install the bom command
        shell: bash
        run: go install sigs.k8s.io/bom/cmd/bom@v0.2.2

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Retrieve tag name
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo TAG_NAME=$(echo ${{ github.ref_name }}) >> $GITHUB_ENV

      - name: Create SBOM file
        shell: bash
        run: |
          bom generate -n https://kubewarden.io/kubewarden.spdx \
            --image "ghcr.io/${{github.repository_owner}}/policy-server@${{ needs.container-build.outputs.digest }}" \
            . > policy-server-sbom.spdx

      - name: Sign BOM file
        run: |
          cosign sign-blob --yes --output-certificate policy-server-sbom.spdx.cert \
            --output-signature policy-server-sbom.spdx.sig \
            policy-server-sbom.spdx

      - name: Get latest release tag
        id: get_last_release_tag
        uses: actions/github-script@v6
        with:
          script: |
            let release = await github.rest.repos.getLatestRelease({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });

            if (release.status  === 200 ) {
              core.setOutput('old_release_tag', release.data.tag_name)
              return
            }
            core.setFailed("Cannot find latest release")

      - name: Get release ID from the release created by release drafter
        uses: actions/github-script@v6
        with:
          script: |
            let releases = await github.rest.repos.listReleases({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });
            for (const release of releases.data) {
              if (release.draft) {
                      core.info(release)
                      core.exportVariable('RELEASE_ID', release.id)
                      return
              }
            }
            core.setFailed(`Draft release not found`)

      - name: Upload release assets
        id: upload_release_assets
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            let files = ['policy-server-sbom.spdx', 'policy-server-sbom.spdx.cert', 'policy-server-sbom.spdx.sig']
            const {RELEASE_ID} = process.env

            for (const file of files) {
              let file_data = fs.readFileSync(file);

              let response = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: `${RELEASE_ID}`,
                name: file,
                data: file_data,
              });
            }

      - name: Publish release
        uses: actions/github-script@v6
        with:
          script: |
            const {RELEASE_ID} = process.env
            const {TAG_NAME} = process.env
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: `${RELEASE_ID}`,
              draft: false,
              tag_name: `${TAG_NAME}`,
              name: `${TAG_NAME}`,
              prerelease: `${{ contains(github.event.workflow_run.head_branch, '-alpha') || contains(github.event.workflow_run.head_branch, '-beta') || contains(github.event.workflow_run.head_branch, '-rc') }}`,
            });

      - name: Trigger chart update
        uses: peter-evans/repository-dispatch@4c03f6fcc3d786d9feef89ed5544ccf37d52e232
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
          repository: "${{github.repository_owner}}/helm-charts"
          event-type: update-chart
          client-payload: '{"version": "${{ github.ref_name }}", "oldVersion": "${{ steps.get_last_release_tag.outputs.old_release_tag }}", "repository": "${{ github.repository }}"}'
